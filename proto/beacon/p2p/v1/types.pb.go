// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/beacon/p2p/v1/types.proto

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import common "github.com/prysmaticlabs/prysm/proto/common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BeaconState struct {
	ValidatorRegistry                    []*ValidatorRecord               `protobuf:"bytes,1,rep,name=validator_registry,json=validatorRegistry,proto3" json:"validator_registry,omitempty"`
	ValidatorRegistryLastChangeSlot      uint64                           `protobuf:"varint,2,opt,name=validator_registry_last_change_slot,json=validatorRegistryLastChangeSlot,proto3" json:"validator_registry_last_change_slot,omitempty"`
	ValidatorRegistryExitCount           uint64                           `protobuf:"varint,3,opt,name=validator_registry_exit_count,json=validatorRegistryExitCount,proto3" json:"validator_registry_exit_count,omitempty"`
	ValidatorRegistryDeltaChainTipHash32 []byte                           `protobuf:"bytes,4,opt,name=validator_registry_delta_chain_tip_hash32,json=validatorRegistryDeltaChainTipHash32,proto3" json:"validator_registry_delta_chain_tip_hash32,omitempty"`
	RandaoMixHash32                      []byte                           `protobuf:"bytes,1001,opt,name=randao_mix_hash32,json=randaoMixHash32,proto3" json:"randao_mix_hash32,omitempty"`
	NextSeedHash32                       []byte                           `protobuf:"bytes,1002,opt,name=next_seed_hash32,json=nextSeedHash32,proto3" json:"next_seed_hash32,omitempty"`
	ShardAndCommitteesForSlots           []*ShardAndCommitteeArray        `protobuf:"bytes,1003,rep,name=shard_and_committees_for_slots,json=shardAndCommitteesForSlots,proto3" json:"shard_and_committees_for_slots,omitempty"`
	PersistentCommittees                 []*common.Uint32List             `protobuf:"bytes,1004,rep,name=persistent_committees,json=persistentCommittees,proto3" json:"persistent_committees,omitempty"`
	PersistentCommitteeReassignments     []*ShardReassignmentRecord       `protobuf:"bytes,1005,rep,name=persistent_committee_reassignments,json=persistentCommitteeReassignments,proto3" json:"persistent_committee_reassignments,omitempty"`
	PreviousJustifiedSlot                uint64                           `protobuf:"varint,2001,opt,name=previous_justified_slot,json=previousJustifiedSlot,proto3" json:"previous_justified_slot,omitempty"`
	JustifiedSlot                        uint64                           `protobuf:"varint,2002,opt,name=justified_slot,json=justifiedSlot,proto3" json:"justified_slot,omitempty"`
	JustifiedSlotBitfield                uint64                           `protobuf:"varint,2003,opt,name=justified_slot_bitfield,json=justifiedSlotBitfield,proto3" json:"justified_slot_bitfield,omitempty"`
	FinalizedSlot                        uint64                           `protobuf:"varint,2004,opt,name=finalized_slot,json=finalizedSlot,proto3" json:"finalized_slot,omitempty"`
	LatestCrosslinks                     []*CrosslinkRecord               `protobuf:"bytes,3001,rep,name=latest_crosslinks,json=latestCrosslinks,proto3" json:"latest_crosslinks,omitempty"`
	LastStateRecalculationSlot           uint64                           `protobuf:"varint,3002,opt,name=last_state_recalculation_slot,json=lastStateRecalculationSlot,proto3" json:"last_state_recalculation_slot,omitempty"`
	LatestBlockHash32S                   [][]byte                         `protobuf:"bytes,3003,rep,name=latest_block_hash32s,json=latestBlockHash32s,proto3" json:"latest_block_hash32s,omitempty"`
	LatestPenalizedExitBalances          []uint64                         `protobuf:"varint,3004,rep,packed,name=latest_penalized_exit_balances,json=latestPenalizedExitBalances,proto3" json:"latest_penalized_exit_balances,omitempty"`
	LatestAttestations                   []*PendingAttestationRecord      `protobuf:"bytes,3005,rep,name=latest_attestations,json=latestAttestations,proto3" json:"latest_attestations,omitempty"`
	ProcessedPowReceiptRootHash32        [][]byte                         `protobuf:"bytes,4001,rep,name=processed_pow_receipt_root_hash32,json=processedPowReceiptRootHash32,proto3" json:"processed_pow_receipt_root_hash32,omitempty"`
	CandidatePowReceiptRoots             []*CandidatePoWReceiptRootRecord `protobuf:"bytes,4002,rep,name=candidate_pow_receipt_roots,json=candidatePowReceiptRoots,proto3" json:"candidate_pow_receipt_roots,omitempty"`
	GenesisTime                          uint64                           `protobuf:"varint,5001,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	ForkData                             *ForkData                        `protobuf:"bytes,5002,opt,name=fork_data,json=forkData,proto3" json:"fork_data,omitempty"`
	Validators                           []*ValidatorRecord               `protobuf:"bytes,10000,rep,name=validators,proto3" json:"validators,omitempty"`                                                                                    // Deprecated: Do not use.
	ValidatorSetChangeSlot               uint64                           `protobuf:"varint,10001,opt,name=validator_set_change_slot,json=validatorSetChangeSlot,proto3" json:"validator_set_change_slot,omitempty"`                         // Deprecated: Do not use.
	Crosslinks                           []*CrosslinkRecord               `protobuf:"bytes,10002,rep,name=crosslinks,proto3" json:"crosslinks,omitempty"`                                                                                    // Deprecated: Do not use.
	RandaoMix                            []byte                           `protobuf:"bytes,10003,opt,name=randao_mix,json=randaoMix,proto3" json:"randao_mix,omitempty"`                                                                     // Deprecated: Do not use.
	PersistentCommitteeReassignment      []*ShardReassignmentRecord       `protobuf:"bytes,10004,rep,name=persistent_committee_reassignment,json=persistentCommitteeReassignment,proto3" json:"persistent_committee_reassignment,omitempty"` // Deprecated: Do not use.
	LastFinalizedSlot                    uint64                           `protobuf:"varint,10005,opt,name=last_finalized_slot,json=lastFinalizedSlot,proto3" json:"last_finalized_slot,omitempty"`                                          // Deprecated: Do not use.
	LastJustifiedSlot                    uint64                           `protobuf:"varint,10006,opt,name=last_justified_slot,json=lastJustifiedSlot,proto3" json:"last_justified_slot,omitempty"`                                          // Deprecated: Do not use.
	JustifiedStreak                      uint64                           `protobuf:"varint,10007,opt,name=justified_streak,json=justifiedStreak,proto3" json:"justified_streak,omitempty"`                                                  // Deprecated: Do not use.
	NextShufflingSeed                    []byte                           `protobuf:"bytes,10008,opt,name=next_shuffling_seed,json=nextShufflingSeed,proto3" json:"next_shuffling_seed,omitempty"`                                           // Deprecated: Do not use.
	DepositsPenalizedInPeriod            []uint64                         `protobuf:"varint,10009,rep,packed,name=deposits_penalized_in_period,json=depositsPenalizedInPeriod,proto3" json:"deposits_penalized_in_period,omitempty"`         // Deprecated: Do not use.
	ValidatorDeltaHashChain              []byte                           `protobuf:"bytes,10010,opt,name=validator_delta_hash_chain,json=validatorDeltaHashChain,proto3" json:"validator_delta_hash_chain,omitempty"`                       // Deprecated: Do not use.
	CurrentExitSeq                       uint64                           `protobuf:"varint,10011,opt,name=current_exit_seq,json=currentExitSeq,proto3" json:"current_exit_seq,omitempty"`                                                   // Deprecated: Do not use.
	KnownPowReceiptRoot                  []byte                           `protobuf:"bytes,10012,opt,name=known_pow_receipt_root,json=knownPowReceiptRoot,proto3" json:"known_pow_receipt_root,omitempty"`                                   // Deprecated: Do not use.
	CandidatePowReceiptRoot              []byte                           `protobuf:"bytes,10013,opt,name=candidate_pow_receipt_root,json=candidatePowReceiptRoot,proto3" json:"candidate_pow_receipt_root,omitempty"`                       // Deprecated: Do not use.
	CandidatePowReceiptRootVotes         uint64                           `protobuf:"varint,10014,opt,name=candidate_pow_receipt_root_votes,json=candidatePowReceiptRootVotes,proto3" json:"candidate_pow_receipt_root_votes,omitempty"`     // Deprecated: Do not use.
	PendingAttestations                  []*AggregatedAttestation         `protobuf:"bytes,10018,rep,name=pending_attestations,json=pendingAttestations,proto3" json:"pending_attestations,omitempty"`                                       // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral                 struct{}                         `json:"-"`
	XXX_unrecognized                     []byte                           `json:"-"`
	XXX_sizecache                        int32                            `json:"-"`
}

func (m *BeaconState) Reset()         { *m = BeaconState{} }
func (m *BeaconState) String() string { return proto.CompactTextString(m) }
func (*BeaconState) ProtoMessage()    {}
func (*BeaconState) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_1fa3782695c97b6c, []int{0}
}
func (m *BeaconState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeaconState.Unmarshal(m, b)
}
func (m *BeaconState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeaconState.Marshal(b, m, deterministic)
}
func (dst *BeaconState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconState.Merge(dst, src)
}
func (m *BeaconState) XXX_Size() int {
	return xxx_messageInfo_BeaconState.Size(m)
}
func (m *BeaconState) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconState.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconState proto.InternalMessageInfo

func (m *BeaconState) GetValidatorRegistry() []*ValidatorRecord {
	if m != nil {
		return m.ValidatorRegistry
	}
	return nil
}

func (m *BeaconState) GetValidatorRegistryLastChangeSlot() uint64 {
	if m != nil {
		return m.ValidatorRegistryLastChangeSlot
	}
	return 0
}

func (m *BeaconState) GetValidatorRegistryExitCount() uint64 {
	if m != nil {
		return m.ValidatorRegistryExitCount
	}
	return 0
}

func (m *BeaconState) GetValidatorRegistryDeltaChainTipHash32() []byte {
	if m != nil {
		return m.ValidatorRegistryDeltaChainTipHash32
	}
	return nil
}

func (m *BeaconState) GetRandaoMixHash32() []byte {
	if m != nil {
		return m.RandaoMixHash32
	}
	return nil
}

func (m *BeaconState) GetNextSeedHash32() []byte {
	if m != nil {
		return m.NextSeedHash32
	}
	return nil
}

func (m *BeaconState) GetShardAndCommitteesForSlots() []*ShardAndCommitteeArray {
	if m != nil {
		return m.ShardAndCommitteesForSlots
	}
	return nil
}

func (m *BeaconState) GetPersistentCommittees() []*common.Uint32List {
	if m != nil {
		return m.PersistentCommittees
	}
	return nil
}

func (m *BeaconState) GetPersistentCommitteeReassignments() []*ShardReassignmentRecord {
	if m != nil {
		return m.PersistentCommitteeReassignments
	}
	return nil
}

func (m *BeaconState) GetPreviousJustifiedSlot() uint64 {
	if m != nil {
		return m.PreviousJustifiedSlot
	}
	return 0
}

func (m *BeaconState) GetJustifiedSlot() uint64 {
	if m != nil {
		return m.JustifiedSlot
	}
	return 0
}

func (m *BeaconState) GetJustifiedSlotBitfield() uint64 {
	if m != nil {
		return m.JustifiedSlotBitfield
	}
	return 0
}

func (m *BeaconState) GetFinalizedSlot() uint64 {
	if m != nil {
		return m.FinalizedSlot
	}
	return 0
}

func (m *BeaconState) GetLatestCrosslinks() []*CrosslinkRecord {
	if m != nil {
		return m.LatestCrosslinks
	}
	return nil
}

func (m *BeaconState) GetLastStateRecalculationSlot() uint64 {
	if m != nil {
		return m.LastStateRecalculationSlot
	}
	return 0
}

func (m *BeaconState) GetLatestBlockHash32S() [][]byte {
	if m != nil {
		return m.LatestBlockHash32S
	}
	return nil
}

func (m *BeaconState) GetLatestPenalizedExitBalances() []uint64 {
	if m != nil {
		return m.LatestPenalizedExitBalances
	}
	return nil
}

func (m *BeaconState) GetLatestAttestations() []*PendingAttestationRecord {
	if m != nil {
		return m.LatestAttestations
	}
	return nil
}

func (m *BeaconState) GetProcessedPowReceiptRootHash32() [][]byte {
	if m != nil {
		return m.ProcessedPowReceiptRootHash32
	}
	return nil
}

func (m *BeaconState) GetCandidatePowReceiptRoots() []*CandidatePoWReceiptRootRecord {
	if m != nil {
		return m.CandidatePowReceiptRoots
	}
	return nil
}

func (m *BeaconState) GetGenesisTime() uint64 {
	if m != nil {
		return m.GenesisTime
	}
	return 0
}

func (m *BeaconState) GetForkData() *ForkData {
	if m != nil {
		return m.ForkData
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconState) GetValidators() []*ValidatorRecord {
	if m != nil {
		return m.Validators
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconState) GetValidatorSetChangeSlot() uint64 {
	if m != nil {
		return m.ValidatorSetChangeSlot
	}
	return 0
}

// Deprecated: Do not use.
func (m *BeaconState) GetCrosslinks() []*CrosslinkRecord {
	if m != nil {
		return m.Crosslinks
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconState) GetRandaoMix() []byte {
	if m != nil {
		return m.RandaoMix
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconState) GetPersistentCommitteeReassignment() []*ShardReassignmentRecord {
	if m != nil {
		return m.PersistentCommitteeReassignment
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconState) GetLastFinalizedSlot() uint64 {
	if m != nil {
		return m.LastFinalizedSlot
	}
	return 0
}

// Deprecated: Do not use.
func (m *BeaconState) GetLastJustifiedSlot() uint64 {
	if m != nil {
		return m.LastJustifiedSlot
	}
	return 0
}

// Deprecated: Do not use.
func (m *BeaconState) GetJustifiedStreak() uint64 {
	if m != nil {
		return m.JustifiedStreak
	}
	return 0
}

// Deprecated: Do not use.
func (m *BeaconState) GetNextShufflingSeed() []byte {
	if m != nil {
		return m.NextShufflingSeed
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconState) GetDepositsPenalizedInPeriod() []uint64 {
	if m != nil {
		return m.DepositsPenalizedInPeriod
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconState) GetValidatorDeltaHashChain() []byte {
	if m != nil {
		return m.ValidatorDeltaHashChain
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconState) GetCurrentExitSeq() uint64 {
	if m != nil {
		return m.CurrentExitSeq
	}
	return 0
}

// Deprecated: Do not use.
func (m *BeaconState) GetKnownPowReceiptRoot() []byte {
	if m != nil {
		return m.KnownPowReceiptRoot
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconState) GetCandidatePowReceiptRoot() []byte {
	if m != nil {
		return m.CandidatePowReceiptRoot
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconState) GetCandidatePowReceiptRootVotes() uint64 {
	if m != nil {
		return m.CandidatePowReceiptRootVotes
	}
	return 0
}

// Deprecated: Do not use.
func (m *BeaconState) GetPendingAttestations() []*AggregatedAttestation {
	if m != nil {
		return m.PendingAttestations
	}
	return nil
}

type ForkData struct {
	PreForkVersion       uint64   `protobuf:"varint,1,opt,name=pre_fork_version,json=preForkVersion,proto3" json:"pre_fork_version,omitempty"`
	PostForkVersion      uint64   `protobuf:"varint,2,opt,name=post_fork_version,json=postForkVersion,proto3" json:"post_fork_version,omitempty"`
	ForkSlot             uint64   `protobuf:"varint,3,opt,name=fork_slot,json=forkSlot,proto3" json:"fork_slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForkData) Reset()         { *m = ForkData{} }
func (m *ForkData) String() string { return proto.CompactTextString(m) }
func (*ForkData) ProtoMessage()    {}
func (*ForkData) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_1fa3782695c97b6c, []int{1}
}
func (m *ForkData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForkData.Unmarshal(m, b)
}
func (m *ForkData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForkData.Marshal(b, m, deterministic)
}
func (dst *ForkData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForkData.Merge(dst, src)
}
func (m *ForkData) XXX_Size() int {
	return xxx_messageInfo_ForkData.Size(m)
}
func (m *ForkData) XXX_DiscardUnknown() {
	xxx_messageInfo_ForkData.DiscardUnknown(m)
}

var xxx_messageInfo_ForkData proto.InternalMessageInfo

func (m *ForkData) GetPreForkVersion() uint64 {
	if m != nil {
		return m.PreForkVersion
	}
	return 0
}

func (m *ForkData) GetPostForkVersion() uint64 {
	if m != nil {
		return m.PostForkVersion
	}
	return 0
}

func (m *ForkData) GetForkSlot() uint64 {
	if m != nil {
		return m.ForkSlot
	}
	return 0
}

type CandidatePoWReceiptRootRecord struct {
	CandidatePowReceiptRootHash32 []byte   `protobuf:"bytes,1,opt,name=candidate_pow_receipt_root_hash32,json=candidatePowReceiptRootHash32,proto3" json:"candidate_pow_receipt_root_hash32,omitempty"`
	Votes                         uint64   `protobuf:"varint,2,opt,name=votes,proto3" json:"votes,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *CandidatePoWReceiptRootRecord) Reset()         { *m = CandidatePoWReceiptRootRecord{} }
func (m *CandidatePoWReceiptRootRecord) String() string { return proto.CompactTextString(m) }
func (*CandidatePoWReceiptRootRecord) ProtoMessage()    {}
func (*CandidatePoWReceiptRootRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_1fa3782695c97b6c, []int{2}
}
func (m *CandidatePoWReceiptRootRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CandidatePoWReceiptRootRecord.Unmarshal(m, b)
}
func (m *CandidatePoWReceiptRootRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CandidatePoWReceiptRootRecord.Marshal(b, m, deterministic)
}
func (dst *CandidatePoWReceiptRootRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandidatePoWReceiptRootRecord.Merge(dst, src)
}
func (m *CandidatePoWReceiptRootRecord) XXX_Size() int {
	return xxx_messageInfo_CandidatePoWReceiptRootRecord.Size(m)
}
func (m *CandidatePoWReceiptRootRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_CandidatePoWReceiptRootRecord.DiscardUnknown(m)
}

var xxx_messageInfo_CandidatePoWReceiptRootRecord proto.InternalMessageInfo

func (m *CandidatePoWReceiptRootRecord) GetCandidatePowReceiptRootHash32() []byte {
	if m != nil {
		return m.CandidatePowReceiptRootHash32
	}
	return nil
}

func (m *CandidatePoWReceiptRootRecord) GetVotes() uint64 {
	if m != nil {
		return m.Votes
	}
	return 0
}

type PendingAttestationRecord struct {
	Data                  *AttestationData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ParticipationBitfield []byte           `protobuf:"bytes,2,opt,name=participation_bitfield,json=participationBitfield,proto3" json:"participation_bitfield,omitempty"`
	CustodyBitfield       []byte           `protobuf:"bytes,3,opt,name=custody_bitfield,json=custodyBitfield,proto3" json:"custody_bitfield,omitempty"`
	SlotIncluded          uint64           `protobuf:"varint,4,opt,name=slot_included,json=slotIncluded,proto3" json:"slot_included,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}         `json:"-"`
	XXX_unrecognized      []byte           `json:"-"`
	XXX_sizecache         int32            `json:"-"`
}

func (m *PendingAttestationRecord) Reset()         { *m = PendingAttestationRecord{} }
func (m *PendingAttestationRecord) String() string { return proto.CompactTextString(m) }
func (*PendingAttestationRecord) ProtoMessage()    {}
func (*PendingAttestationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_1fa3782695c97b6c, []int{3}
}
func (m *PendingAttestationRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PendingAttestationRecord.Unmarshal(m, b)
}
func (m *PendingAttestationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PendingAttestationRecord.Marshal(b, m, deterministic)
}
func (dst *PendingAttestationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingAttestationRecord.Merge(dst, src)
}
func (m *PendingAttestationRecord) XXX_Size() int {
	return xxx_messageInfo_PendingAttestationRecord.Size(m)
}
func (m *PendingAttestationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingAttestationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PendingAttestationRecord proto.InternalMessageInfo

func (m *PendingAttestationRecord) GetData() *AttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PendingAttestationRecord) GetParticipationBitfield() []byte {
	if m != nil {
		return m.ParticipationBitfield
	}
	return nil
}

func (m *PendingAttestationRecord) GetCustodyBitfield() []byte {
	if m != nil {
		return m.CustodyBitfield
	}
	return nil
}

func (m *PendingAttestationRecord) GetSlotIncluded() uint64 {
	if m != nil {
		return m.SlotIncluded
	}
	return 0
}

type AttestationData struct {
	Slot                  uint64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Shard                 uint64   `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	BeaconBlockHash32     []byte   `protobuf:"bytes,3,opt,name=beacon_block_hash32,json=beaconBlockHash32,proto3" json:"beacon_block_hash32,omitempty"`
	EpochBoundaryHash32   []byte   `protobuf:"bytes,4,opt,name=epoch_boundary_hash32,json=epochBoundaryHash32,proto3" json:"epoch_boundary_hash32,omitempty"`
	ShardBlockHash32      []byte   `protobuf:"bytes,5,opt,name=shard_block_hash32,json=shardBlockHash32,proto3" json:"shard_block_hash32,omitempty"`
	LatestCrosslinkHash32 []byte   `protobuf:"bytes,6,opt,name=latest_crosslink_hash32,json=latestCrosslinkHash32,proto3" json:"latest_crosslink_hash32,omitempty"`
	JustifiedSlot         uint64   `protobuf:"varint,7,opt,name=justified_slot,json=justifiedSlot,proto3" json:"justified_slot,omitempty"`
	JustifiedBlockHash32  []byte   `protobuf:"bytes,8,opt,name=justified_block_hash32,json=justifiedBlockHash32,proto3" json:"justified_block_hash32,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *AttestationData) Reset()         { *m = AttestationData{} }
func (m *AttestationData) String() string { return proto.CompactTextString(m) }
func (*AttestationData) ProtoMessage()    {}
func (*AttestationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_1fa3782695c97b6c, []int{4}
}
func (m *AttestationData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestationData.Unmarshal(m, b)
}
func (m *AttestationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestationData.Marshal(b, m, deterministic)
}
func (dst *AttestationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationData.Merge(dst, src)
}
func (m *AttestationData) XXX_Size() int {
	return xxx_messageInfo_AttestationData.Size(m)
}
func (m *AttestationData) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationData.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationData proto.InternalMessageInfo

func (m *AttestationData) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *AttestationData) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *AttestationData) GetBeaconBlockHash32() []byte {
	if m != nil {
		return m.BeaconBlockHash32
	}
	return nil
}

func (m *AttestationData) GetEpochBoundaryHash32() []byte {
	if m != nil {
		return m.EpochBoundaryHash32
	}
	return nil
}

func (m *AttestationData) GetShardBlockHash32() []byte {
	if m != nil {
		return m.ShardBlockHash32
	}
	return nil
}

func (m *AttestationData) GetLatestCrosslinkHash32() []byte {
	if m != nil {
		return m.LatestCrosslinkHash32
	}
	return nil
}

func (m *AttestationData) GetJustifiedSlot() uint64 {
	if m != nil {
		return m.JustifiedSlot
	}
	return 0
}

func (m *AttestationData) GetJustifiedBlockHash32() []byte {
	if m != nil {
		return m.JustifiedBlockHash32
	}
	return nil
}

type ValidatorRecord struct {
	Pubkey               []byte   `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	WithdrawalShard      uint64   `protobuf:"varint,2,opt,name=withdrawal_shard,json=withdrawalShard,proto3" json:"withdrawal_shard,omitempty"`
	WithdrawalAddress    []byte   `protobuf:"bytes,3,opt,name=withdrawal_address,json=withdrawalAddress,proto3" json:"withdrawal_address,omitempty"`
	RandaoCommitment     []byte   `protobuf:"bytes,4,opt,name=randao_commitment,json=randaoCommitment,proto3" json:"randao_commitment,omitempty"`
	Balance              uint64   `protobuf:"varint,5,opt,name=balance,proto3" json:"balance,omitempty"`
	Status               uint64   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	ExitSlot             uint64   `protobuf:"varint,7,opt,name=exit_slot,json=exitSlot,proto3" json:"exit_slot,omitempty"`
	RandaoLastChange     uint64   `protobuf:"varint,8,opt,name=randao_last_change,json=randaoLastChange,proto3" json:"randao_last_change,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidatorRecord) Reset()         { *m = ValidatorRecord{} }
func (m *ValidatorRecord) String() string { return proto.CompactTextString(m) }
func (*ValidatorRecord) ProtoMessage()    {}
func (*ValidatorRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_1fa3782695c97b6c, []int{5}
}
func (m *ValidatorRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidatorRecord.Unmarshal(m, b)
}
func (m *ValidatorRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidatorRecord.Marshal(b, m, deterministic)
}
func (dst *ValidatorRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorRecord.Merge(dst, src)
}
func (m *ValidatorRecord) XXX_Size() int {
	return xxx_messageInfo_ValidatorRecord.Size(m)
}
func (m *ValidatorRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorRecord proto.InternalMessageInfo

func (m *ValidatorRecord) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ValidatorRecord) GetWithdrawalShard() uint64 {
	if m != nil {
		return m.WithdrawalShard
	}
	return 0
}

func (m *ValidatorRecord) GetWithdrawalAddress() []byte {
	if m != nil {
		return m.WithdrawalAddress
	}
	return nil
}

func (m *ValidatorRecord) GetRandaoCommitment() []byte {
	if m != nil {
		return m.RandaoCommitment
	}
	return nil
}

func (m *ValidatorRecord) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *ValidatorRecord) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ValidatorRecord) GetExitSlot() uint64 {
	if m != nil {
		return m.ExitSlot
	}
	return 0
}

func (m *ValidatorRecord) GetRandaoLastChange() uint64 {
	if m != nil {
		return m.RandaoLastChange
	}
	return 0
}

type ShardReassignmentRecord struct {
	ValidatorIndex       uint32   `protobuf:"varint,1,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	Shard                uint64   `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Slot                 uint64   `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardReassignmentRecord) Reset()         { *m = ShardReassignmentRecord{} }
func (m *ShardReassignmentRecord) String() string { return proto.CompactTextString(m) }
func (*ShardReassignmentRecord) ProtoMessage()    {}
func (*ShardReassignmentRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_1fa3782695c97b6c, []int{6}
}
func (m *ShardReassignmentRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShardReassignmentRecord.Unmarshal(m, b)
}
func (m *ShardReassignmentRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShardReassignmentRecord.Marshal(b, m, deterministic)
}
func (dst *ShardReassignmentRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardReassignmentRecord.Merge(dst, src)
}
func (m *ShardReassignmentRecord) XXX_Size() int {
	return xxx_messageInfo_ShardReassignmentRecord.Size(m)
}
func (m *ShardReassignmentRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardReassignmentRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ShardReassignmentRecord proto.InternalMessageInfo

func (m *ShardReassignmentRecord) GetValidatorIndex() uint32 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *ShardReassignmentRecord) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *ShardReassignmentRecord) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type AggregatedAttestation struct {
	Slot                 uint64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`                                                           // Deprecated: Do not use.
	Shard                uint64   `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`                                                         // Deprecated: Do not use.
	JustifiedSlot        uint64   `protobuf:"varint,3,opt,name=justified_slot,json=justifiedSlot,proto3" json:"justified_slot,omitempty"`                    // Deprecated: Do not use.
	JustifiedBlockHash   []byte   `protobuf:"bytes,4,opt,name=justified_block_hash,json=justifiedBlockHash,proto3" json:"justified_block_hash,omitempty"`    // Deprecated: Do not use.
	ShardBlockHash       []byte   `protobuf:"bytes,5,opt,name=shard_block_hash,json=shardBlockHash,proto3" json:"shard_block_hash,omitempty"`                // Deprecated: Do not use.
	AttesterBitfield     []byte   `protobuf:"bytes,6,opt,name=attester_bitfield,json=attesterBitfield,proto3" json:"attester_bitfield,omitempty"`            // Deprecated: Do not use.
	ObliqueParentHashes  [][]byte `protobuf:"bytes,7,rep,name=oblique_parent_hashes,json=obliqueParentHashes,proto3" json:"oblique_parent_hashes,omitempty"` // Deprecated: Do not use.
	AggregateSig         []uint64 `protobuf:"varint,8,rep,packed,name=aggregate_sig,json=aggregateSig,proto3" json:"aggregate_sig,omitempty"`                // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AggregatedAttestation) Reset()         { *m = AggregatedAttestation{} }
func (m *AggregatedAttestation) String() string { return proto.CompactTextString(m) }
func (*AggregatedAttestation) ProtoMessage()    {}
func (*AggregatedAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_1fa3782695c97b6c, []int{7}
}
func (m *AggregatedAttestation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggregatedAttestation.Unmarshal(m, b)
}
func (m *AggregatedAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggregatedAttestation.Marshal(b, m, deterministic)
}
func (dst *AggregatedAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregatedAttestation.Merge(dst, src)
}
func (m *AggregatedAttestation) XXX_Size() int {
	return xxx_messageInfo_AggregatedAttestation.Size(m)
}
func (m *AggregatedAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregatedAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_AggregatedAttestation proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *AggregatedAttestation) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

// Deprecated: Do not use.
func (m *AggregatedAttestation) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

// Deprecated: Do not use.
func (m *AggregatedAttestation) GetJustifiedSlot() uint64 {
	if m != nil {
		return m.JustifiedSlot
	}
	return 0
}

// Deprecated: Do not use.
func (m *AggregatedAttestation) GetJustifiedBlockHash() []byte {
	if m != nil {
		return m.JustifiedBlockHash
	}
	return nil
}

// Deprecated: Do not use.
func (m *AggregatedAttestation) GetShardBlockHash() []byte {
	if m != nil {
		return m.ShardBlockHash
	}
	return nil
}

// Deprecated: Do not use.
func (m *AggregatedAttestation) GetAttesterBitfield() []byte {
	if m != nil {
		return m.AttesterBitfield
	}
	return nil
}

// Deprecated: Do not use.
func (m *AggregatedAttestation) GetObliqueParentHashes() [][]byte {
	if m != nil {
		return m.ObliqueParentHashes
	}
	return nil
}

// Deprecated: Do not use.
func (m *AggregatedAttestation) GetAggregateSig() []uint64 {
	if m != nil {
		return m.AggregateSig
	}
	return nil
}

type SpecialRecord struct {
	Kind                 uint32   `protobuf:"varint,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Data                 [][]byte `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecialRecord) Reset()         { *m = SpecialRecord{} }
func (m *SpecialRecord) String() string { return proto.CompactTextString(m) }
func (*SpecialRecord) ProtoMessage()    {}
func (*SpecialRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_1fa3782695c97b6c, []int{8}
}
func (m *SpecialRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpecialRecord.Unmarshal(m, b)
}
func (m *SpecialRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpecialRecord.Marshal(b, m, deterministic)
}
func (dst *SpecialRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialRecord.Merge(dst, src)
}
func (m *SpecialRecord) XXX_Size() int {
	return xxx_messageInfo_SpecialRecord.Size(m)
}
func (m *SpecialRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialRecord proto.InternalMessageInfo

func (m *SpecialRecord) GetKind() uint32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *SpecialRecord) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CrosslinkRecord struct {
	ShardBlockHash       []byte   `protobuf:"bytes,1,opt,name=shard_block_hash,json=shardBlockHash,proto3" json:"shard_block_hash,omitempty"`
	Slot                 uint64   `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrosslinkRecord) Reset()         { *m = CrosslinkRecord{} }
func (m *CrosslinkRecord) String() string { return proto.CompactTextString(m) }
func (*CrosslinkRecord) ProtoMessage()    {}
func (*CrosslinkRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_1fa3782695c97b6c, []int{9}
}
func (m *CrosslinkRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrosslinkRecord.Unmarshal(m, b)
}
func (m *CrosslinkRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrosslinkRecord.Marshal(b, m, deterministic)
}
func (dst *CrosslinkRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrosslinkRecord.Merge(dst, src)
}
func (m *CrosslinkRecord) XXX_Size() int {
	return xxx_messageInfo_CrosslinkRecord.Size(m)
}
func (m *CrosslinkRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_CrosslinkRecord.DiscardUnknown(m)
}

var xxx_messageInfo_CrosslinkRecord proto.InternalMessageInfo

func (m *CrosslinkRecord) GetShardBlockHash() []byte {
	if m != nil {
		return m.ShardBlockHash
	}
	return nil
}

func (m *CrosslinkRecord) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type ShardAndCommitteeArray struct {
	ArrayShardAndCommittee []*ShardAndCommittee `protobuf:"bytes,1,rep,name=array_shard_and_committee,json=arrayShardAndCommittee,proto3" json:"array_shard_and_committee,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}             `json:"-"`
	XXX_unrecognized       []byte               `json:"-"`
	XXX_sizecache          int32                `json:"-"`
}

func (m *ShardAndCommitteeArray) Reset()         { *m = ShardAndCommitteeArray{} }
func (m *ShardAndCommitteeArray) String() string { return proto.CompactTextString(m) }
func (*ShardAndCommitteeArray) ProtoMessage()    {}
func (*ShardAndCommitteeArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_1fa3782695c97b6c, []int{10}
}
func (m *ShardAndCommitteeArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShardAndCommitteeArray.Unmarshal(m, b)
}
func (m *ShardAndCommitteeArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShardAndCommitteeArray.Marshal(b, m, deterministic)
}
func (dst *ShardAndCommitteeArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardAndCommitteeArray.Merge(dst, src)
}
func (m *ShardAndCommitteeArray) XXX_Size() int {
	return xxx_messageInfo_ShardAndCommitteeArray.Size(m)
}
func (m *ShardAndCommitteeArray) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardAndCommitteeArray.DiscardUnknown(m)
}

var xxx_messageInfo_ShardAndCommitteeArray proto.InternalMessageInfo

func (m *ShardAndCommitteeArray) GetArrayShardAndCommittee() []*ShardAndCommittee {
	if m != nil {
		return m.ArrayShardAndCommittee
	}
	return nil
}

type ShardAndCommittee struct {
	Shard                uint64   `protobuf:"varint,1,opt,name=shard,proto3" json:"shard,omitempty"`
	Committee            []uint32 `protobuf:"varint,2,rep,packed,name=committee,proto3" json:"committee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardAndCommittee) Reset()         { *m = ShardAndCommittee{} }
func (m *ShardAndCommittee) String() string { return proto.CompactTextString(m) }
func (*ShardAndCommittee) ProtoMessage()    {}
func (*ShardAndCommittee) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_1fa3782695c97b6c, []int{11}
}
func (m *ShardAndCommittee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShardAndCommittee.Unmarshal(m, b)
}
func (m *ShardAndCommittee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShardAndCommittee.Marshal(b, m, deterministic)
}
func (dst *ShardAndCommittee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardAndCommittee.Merge(dst, src)
}
func (m *ShardAndCommittee) XXX_Size() int {
	return xxx_messageInfo_ShardAndCommittee.Size(m)
}
func (m *ShardAndCommittee) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardAndCommittee.DiscardUnknown(m)
}

var xxx_messageInfo_ShardAndCommittee proto.InternalMessageInfo

func (m *ShardAndCommittee) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *ShardAndCommittee) GetCommittee() []uint32 {
	if m != nil {
		return m.Committee
	}
	return nil
}

type BeaconBlock struct {
	Slot                          uint64                   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	RandaoRevealHash32            []byte                   `protobuf:"bytes,2,opt,name=randao_reveal_hash32,json=randaoRevealHash32,proto3" json:"randao_reveal_hash32,omitempty"`
	CandidatePowReceiptRootHash32 []byte                   `protobuf:"bytes,3,opt,name=candidate_pow_receipt_root_hash32,json=candidatePowReceiptRootHash32,proto3" json:"candidate_pow_receipt_root_hash32,omitempty"`
	AncestorHash32S               [][]byte                 `protobuf:"bytes,4,rep,name=ancestor_hash32s,json=ancestorHash32s,proto3" json:"ancestor_hash32s,omitempty"`
	StateRootHash32               []byte                   `protobuf:"bytes,5,opt,name=state_root_hash32,json=stateRootHash32,proto3" json:"state_root_hash32,omitempty"`
	Attestations                  []*AggregatedAttestation `protobuf:"bytes,6,rep,name=attestations,proto3" json:"attestations,omitempty"` // Deprecated: Do not use.
	Specials                      []*SpecialRecord         `protobuf:"bytes,7,rep,name=specials,proto3" json:"specials,omitempty"`
	ProposerSignature             [][]byte                 `protobuf:"bytes,8,rep,name=proposer_signature,json=proposerSignature,proto3" json:"proposer_signature,omitempty"`
	AncestorHashes                [][]byte                 `protobuf:"bytes,1002,rep,name=ancestor_hashes,json=ancestorHashes,proto3" json:"ancestor_hashes,omitempty"` // Deprecated: Do not use.
	RandaoReveal                  []byte                   `protobuf:"bytes,1003,opt,name=randao_reveal,json=randaoReveal,proto3" json:"randao_reveal,omitempty"`       // Deprecated: Do not use.
	PowChainRef                   []byte                   `protobuf:"bytes,1004,opt,name=pow_chain_ref,json=powChainRef,proto3" json:"pow_chain_ref,omitempty"`        // Deprecated: Do not use.
	StateRoot                     []byte                   `protobuf:"bytes,1005,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`                // Deprecated: Do not use.
	Timestamp                     *timestamp.Timestamp     `protobuf:"bytes,1006,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                 // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral          struct{}                 `json:"-"`
	XXX_unrecognized              []byte                   `json:"-"`
	XXX_sizecache                 int32                    `json:"-"`
}

func (m *BeaconBlock) Reset()         { *m = BeaconBlock{} }
func (m *BeaconBlock) String() string { return proto.CompactTextString(m) }
func (*BeaconBlock) ProtoMessage()    {}
func (*BeaconBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_1fa3782695c97b6c, []int{12}
}
func (m *BeaconBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeaconBlock.Unmarshal(m, b)
}
func (m *BeaconBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeaconBlock.Marshal(b, m, deterministic)
}
func (dst *BeaconBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconBlock.Merge(dst, src)
}
func (m *BeaconBlock) XXX_Size() int {
	return xxx_messageInfo_BeaconBlock.Size(m)
}
func (m *BeaconBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconBlock.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconBlock proto.InternalMessageInfo

func (m *BeaconBlock) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *BeaconBlock) GetRandaoRevealHash32() []byte {
	if m != nil {
		return m.RandaoRevealHash32
	}
	return nil
}

func (m *BeaconBlock) GetCandidatePowReceiptRootHash32() []byte {
	if m != nil {
		return m.CandidatePowReceiptRootHash32
	}
	return nil
}

func (m *BeaconBlock) GetAncestorHash32S() [][]byte {
	if m != nil {
		return m.AncestorHash32S
	}
	return nil
}

func (m *BeaconBlock) GetStateRootHash32() []byte {
	if m != nil {
		return m.StateRootHash32
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconBlock) GetAttestations() []*AggregatedAttestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

func (m *BeaconBlock) GetSpecials() []*SpecialRecord {
	if m != nil {
		return m.Specials
	}
	return nil
}

func (m *BeaconBlock) GetProposerSignature() [][]byte {
	if m != nil {
		return m.ProposerSignature
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconBlock) GetAncestorHashes() [][]byte {
	if m != nil {
		return m.AncestorHashes
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconBlock) GetRandaoReveal() []byte {
	if m != nil {
		return m.RandaoReveal
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconBlock) GetPowChainRef() []byte {
	if m != nil {
		return m.PowChainRef
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconBlock) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

// Deprecated: Do not use.
func (m *BeaconBlock) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*BeaconState)(nil), "ethereum.beacon.p2p.v1.BeaconState")
	proto.RegisterType((*ForkData)(nil), "ethereum.beacon.p2p.v1.ForkData")
	proto.RegisterType((*CandidatePoWReceiptRootRecord)(nil), "ethereum.beacon.p2p.v1.CandidatePoWReceiptRootRecord")
	proto.RegisterType((*PendingAttestationRecord)(nil), "ethereum.beacon.p2p.v1.PendingAttestationRecord")
	proto.RegisterType((*AttestationData)(nil), "ethereum.beacon.p2p.v1.AttestationData")
	proto.RegisterType((*ValidatorRecord)(nil), "ethereum.beacon.p2p.v1.ValidatorRecord")
	proto.RegisterType((*ShardReassignmentRecord)(nil), "ethereum.beacon.p2p.v1.ShardReassignmentRecord")
	proto.RegisterType((*AggregatedAttestation)(nil), "ethereum.beacon.p2p.v1.AggregatedAttestation")
	proto.RegisterType((*SpecialRecord)(nil), "ethereum.beacon.p2p.v1.SpecialRecord")
	proto.RegisterType((*CrosslinkRecord)(nil), "ethereum.beacon.p2p.v1.CrosslinkRecord")
	proto.RegisterType((*ShardAndCommitteeArray)(nil), "ethereum.beacon.p2p.v1.ShardAndCommitteeArray")
	proto.RegisterType((*ShardAndCommittee)(nil), "ethereum.beacon.p2p.v1.ShardAndCommittee")
	proto.RegisterType((*BeaconBlock)(nil), "ethereum.beacon.p2p.v1.BeaconBlock")
}

func init() {
	proto.RegisterFile("proto/beacon/p2p/v1/types.proto", fileDescriptor_types_1fa3782695c97b6c)
}

var fileDescriptor_types_1fa3782695c97b6c = []byte{
	// 2039 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0x59, 0x73, 0x1b, 0xc7,
	0x11, 0x2e, 0x90, 0xb0, 0x48, 0x36, 0x0f, 0x00, 0x23, 0x1e, 0x23, 0x52, 0x34, 0x29, 0x38, 0x8e,
	0x48, 0x47, 0x02, 0x2d, 0x2a, 0xb6, 0x52, 0x95, 0x8a, 0x2b, 0x24, 0x15, 0x45, 0x4a, 0x18, 0x85,
	0x59, 0x4a, 0xf2, 0xe3, 0xd6, 0x00, 0x3b, 0x00, 0xc7, 0x5c, 0xee, 0xac, 0x76, 0x06, 0x3c, 0x52,
	0x15, 0x27, 0x8f, 0x49, 0x9e, 0x72, 0xdf, 0x49, 0x95, 0xfd, 0x9e, 0x1f, 0x90, 0xeb, 0x47, 0xe4,
	0x78, 0xce, 0x43, 0xde, 0x22, 0xdb, 0xf9, 0x0d, 0xa9, 0xe9, 0x99, 0x3d, 0x70, 0xc9, 0xb2, 0x9f,
	0x80, 0x9d, 0xfe, 0xba, 0xa7, 0xb7, 0xa7, 0xfb, 0xeb, 0x9e, 0x85, 0xb5, 0x38, 0x91, 0x5a, 0x6e,
	0x35, 0x39, 0x6b, 0xc9, 0x68, 0x2b, 0xde, 0x8e, 0xb7, 0x4e, 0x6f, 0x6d, 0xe9, 0x8b, 0x98, 0xab,
	0x06, 0x4a, 0xc8, 0x22, 0xd7, 0x47, 0x3c, 0xe1, 0xdd, 0x93, 0x86, 0xc5, 0x34, 0xe2, 0xed, 0xb8,
	0x71, 0x7a, 0x6b, 0x79, 0xad, 0x23, 0x65, 0x27, 0xe4, 0x5b, 0x88, 0x6a, 0x76, 0xdb, 0x5b, 0x5a,
	0x9c, 0x70, 0xa5, 0xd9, 0x49, 0x6c, 0x15, 0x97, 0x57, 0xac, 0xe5, 0x96, 0x3c, 0x39, 0x91, 0xd1,
	0xd6, 0x09, 0x57, 0x8a, 0x75, 0x52, 0xab, 0xf5, 0xef, 0x2f, 0xc0, 0xf4, 0x2e, 0xda, 0x3b, 0xd4,
	0x4c, 0x73, 0xf2, 0x04, 0xc8, 0x29, 0x0b, 0x45, 0xc0, 0xb4, 0x4c, 0xfc, 0x84, 0x77, 0x84, 0xd2,
	0xc9, 0x05, 0x2d, 0xad, 0x8f, 0x6f, 0x4c, 0x6f, 0x5f, 0x6f, 0x0c, 0x77, 0xa1, 0xf1, 0x24, 0xd5,
	0xf0, 0x78, 0x4b, 0x26, 0x81, 0x57, 0x3b, 0xcd, 0x17, 0xac, 0x05, 0xb2, 0x0f, 0xaf, 0x0c, 0xda,
	0xf5, 0x43, 0xa6, 0xb4, 0xdf, 0x3a, 0x62, 0x51, 0x87, 0xfb, 0x2a, 0x94, 0x9a, 0x8e, 0xad, 0x97,
	0x36, 0xca, 0xde, 0xda, 0x80, 0xfe, 0x3e, 0x53, 0x7a, 0x0f, 0x71, 0x87, 0xa1, 0xd4, 0x64, 0x07,
	0x56, 0x87, 0x58, 0xe3, 0xe7, 0x42, 0xfb, 0x2d, 0xd9, 0x8d, 0x34, 0x1d, 0x47, 0x3b, 0xcb, 0x03,
	0x76, 0xbe, 0x72, 0x2e, 0xf4, 0x9e, 0x41, 0x90, 0xb7, 0x61, 0x73, 0x88, 0x89, 0x80, 0x87, 0x9a,
	0x19, 0x8f, 0x44, 0xe4, 0x6b, 0x11, 0xfb, 0x47, 0x4c, 0x1d, 0xdd, 0xde, 0xa6, 0xe5, 0xf5, 0xd2,
	0xc6, 0x8c, 0xf7, 0x99, 0x01, 0x73, 0x77, 0x0d, 0x7c, 0xcf, 0xa0, 0x1f, 0x89, 0xf8, 0x3e, 0x62,
	0xc9, 0xe7, 0xa0, 0x96, 0xb0, 0x28, 0x60, 0xd2, 0x3f, 0x11, 0xe7, 0xa9, 0x81, 0xff, 0x4e, 0xa0,
	0x85, 0x8a, 0x95, 0x7c, 0x43, 0x9c, 0x3b, 0xf0, 0x26, 0x54, 0x23, 0x7e, 0xae, 0x7d, 0xc5, 0x79,
	0x90, 0x62, 0x9f, 0x59, 0xec, 0x9c, 0x11, 0x1c, 0x72, 0x1e, 0x38, 0xa8, 0x82, 0x97, 0xd5, 0x11,
	0x4b, 0x02, 0x9f, 0x45, 0x81, 0x6f, 0x0e, 0x53, 0x68, 0xcd, 0xb9, 0xf2, 0xdb, 0x32, 0xc1, 0xd8,
	0x29, 0xfa, 0xc1, 0x04, 0x1e, 0x53, 0x63, 0xd4, 0x31, 0x1d, 0x1a, 0xf5, 0x9d, 0x28, 0xd8, 0x4b,
	0x95, 0x77, 0x92, 0x84, 0x5d, 0x78, 0xcb, 0xaa, 0x7f, 0x5d, 0xdd, 0x93, 0x89, 0x89, 0xb3, 0x22,
	0xdf, 0x82, 0x85, 0x98, 0x27, 0x4a, 0x28, 0xcd, 0x23, 0x5d, 0xd8, 0x95, 0x7e, 0x68, 0xf7, 0x5a,
	0xc9, 0xf7, 0xb2, 0xf9, 0xd5, 0x78, 0x2c, 0x22, 0x7d, 0x7b, 0x7b, 0x5f, 0x28, 0xed, 0xcd, 0xe7,
	0xaa, 0xb9, 0x69, 0xf2, 0x2e, 0xd4, 0x87, 0x99, 0xf4, 0x13, 0xce, 0x94, 0x12, 0x9d, 0xe8, 0x84,
	0x47, 0x5a, 0xd1, 0x8f, 0xac, 0xfd, 0xad, 0xe7, 0xbe, 0x8b, 0x57, 0x50, 0x71, 0xa9, 0xb7, 0x3e,
	0x64, 0xcf, 0x22, 0x4c, 0x91, 0x3b, 0xb0, 0x14, 0x27, 0xfc, 0x54, 0xc8, 0xae, 0xf2, 0xdf, 0xe9,
	0x2a, 0x2d, 0xda, 0x82, 0x07, 0x36, 0xfb, 0xfe, 0x5e, 0xc1, 0xb4, 0x59, 0x48, 0xe5, 0x5f, 0x4b,
	0xc5, 0x98, 0x74, 0x9f, 0x85, 0xb9, 0x3e, 0xfc, 0x3f, 0x2c, 0x7e, 0xf6, 0x9d, 0x1e, 0xdc, 0x1d,
	0x58, 0xea, 0xc5, 0xf9, 0x4d, 0xa1, 0xdb, 0x82, 0x87, 0x01, 0xfd, 0xa7, 0xdb, 0xa0, 0x47, 0x61,
	0xd7, 0x49, 0xcd, 0x06, 0x6d, 0x11, 0xb1, 0x50, 0x7c, 0x3b, 0xdd, 0xe0, 0x5f, 0x6e, 0x83, 0x6c,
	0x19, 0x37, 0x78, 0x0c, 0xb5, 0x90, 0x69, 0x6e, 0x4a, 0x27, 0x91, 0x4a, 0x85, 0x22, 0x3a, 0x56,
	0xf4, 0x4f, 0x4b, 0xcf, 0xaf, 0xd1, 0xbd, 0x14, 0xea, 0x02, 0x55, 0xb5, 0x26, 0xb2, 0x65, 0x45,
	0x76, 0x61, 0x15, 0xeb, 0x51, 0x19, 0x22, 0xf0, 0x13, 0xde, 0x62, 0x61, 0xab, 0x1b, 0x32, 0x2d,
	0x64, 0x64, 0xbd, 0xf9, 0xf3, 0x92, 0xad, 0x2a, 0x83, 0x42, 0xb6, 0xf0, 0x8a, 0x18, 0x74, 0xed,
	0x16, 0xcc, 0x3b, 0xd7, 0x9a, 0xa1, 0x6c, 0x1d, 0xbb, 0x94, 0x56, 0xf4, 0x2f, 0xc6, 0xbb, 0x19,
	0x8f, 0x58, 0xe1, 0xae, 0x91, 0xd9, 0xb4, 0x56, 0xe4, 0x2e, 0xbc, 0xec, 0x54, 0x62, 0x9e, 0xbe,
	0x3c, 0x56, 0x72, 0x93, 0x85, 0x2c, 0x6a, 0x71, 0x45, 0xff, 0x6a, 0x94, 0xcb, 0xde, 0x8a, 0x85,
	0x1d, 0xa4, 0x28, 0x53, 0xcb, 0xbb, 0x0e, 0x43, 0x9a, 0x70, 0xd9, 0x59, 0x61, 0xda, 0xfc, 0xa0,
	0x4b, 0x8a, 0xfe, 0xcd, 0x46, 0xe5, 0xf5, 0x51, 0x51, 0x39, 0xe0, 0x51, 0x20, 0xa2, 0xce, 0x4e,
	0xae, 0xe3, 0xc2, 0xe3, 0x3c, 0x2d, 0x08, 0x14, 0x79, 0x00, 0xd7, 0xe2, 0x44, 0xb6, 0xb8, 0x52,
	0x3c, 0xf0, 0x63, 0x79, 0x66, 0x62, 0xc4, 0x45, 0xac, 0xfd, 0x44, 0x4a, 0x9d, 0x56, 0xef, 0x7b,
	0x6b, 0xf8, 0xa6, 0xab, 0x19, 0xf2, 0x40, 0x9e, 0x79, 0x16, 0xe7, 0x49, 0xa9, 0x5d, 0x31, 0x77,
	0x61, 0xa5, 0xc5, 0xa2, 0xc0, 0xb0, 0x09, 0x1f, 0x30, 0xa5, 0xe8, 0xfb, 0x6b, 0xe8, 0xf6, 0x1b,
	0x23, 0x0f, 0x33, 0xd5, 0x3d, 0x90, 0x6f, 0x17, 0x8c, 0x3b, 0xdf, 0x69, 0x2b, 0x17, 0x17, 0xf7,
	0x56, 0xa4, 0x0e, 0x33, 0x1d, 0x1e, 0x71, 0x25, 0x94, 0x6f, 0xba, 0x04, 0xfd, 0xc1, 0x75, 0x3c,
	0xd1, 0x69, 0xb7, 0xf8, 0x48, 0x9c, 0x70, 0xf2, 0x16, 0x4c, 0xb5, 0x65, 0x72, 0xec, 0x07, 0x4c,
	0x33, 0xfa, 0x43, 0x03, 0x98, 0xde, 0x5e, 0x1f, 0xe5, 0xc8, 0x3d, 0x99, 0x1c, 0xdf, 0x65, 0x9a,
	0x79, 0x93, 0x6d, 0xf7, 0x8f, 0xec, 0x03, 0x64, 0x3c, 0xa9, 0xe8, 0x8f, 0x1e, 0x7e, 0xa2, 0xd6,
	0xb1, 0x3b, 0x46, 0x4b, 0x5e, 0x41, 0x9f, 0xbc, 0x05, 0x57, 0x72, 0x9a, 0x56, 0xbc, 0xb7, 0x5b,
	0xfc, 0xf8, 0xa1, 0x71, 0x1f, 0x75, 0x16, 0x33, 0xd4, 0x21, 0x2f, 0x76, 0x8a, 0x7d, 0x80, 0x42,
	0x91, 0xfc, 0xe4, 0xe1, 0x27, 0x2a, 0x12, 0xeb, 0x4d, 0xae, 0x4f, 0xea, 0x00, 0x39, 0xb7, 0xd3,
	0x9f, 0x9a, 0xed, 0x67, 0x10, 0x34, 0x95, 0x11, 0x3b, 0xf9, 0x5e, 0x09, 0xae, 0x7d, 0x2c, 0xc1,
	0xd1, 0x9f, 0x3d, 0xfc, 0x54, 0xfc, 0x86, 0x9b, 0xad, 0x7d, 0x0c, 0xc7, 0x91, 0xdb, 0xa6, 0x18,
	0x94, 0xf6, 0xfb, 0xd8, 0xe4, 0xe7, 0x79, 0xb8, 0x6a, 0x46, 0x7e, 0xaf, 0x87, 0x55, 0x52, 0xa5,
	0x3e, 0x8e, 0xfb, 0x45, 0x9f, 0x52, 0x2f, 0x27, 0x36, 0xa0, 0x5a, 0xc0, 0xeb, 0x84, 0xb3, 0x63,
	0xfa, 0xcb, 0x5c, 0xa3, 0x92, 0x13, 0x1d, 0xca, 0xcc, 0x26, 0xb6, 0xdf, 0x1d, 0x75, 0xdb, 0xed,
	0x50, 0x44, 0x1d, 0xec, 0x7c, 0xf4, 0x57, 0x79, 0x24, 0x6b, 0xd8, 0xf6, 0x52, 0xb1, 0xe9, 0x7f,
	0xe4, 0x2e, 0x5c, 0x0d, 0x78, 0x2c, 0x95, 0xd0, 0xaa, 0xc0, 0x11, 0x22, 0xf2, 0x63, 0x9e, 0x08,
	0x19, 0xd0, 0x5f, 0x9b, 0x58, 0xda, 0x0d, 0xaf, 0xa4, 0xc0, 0x8c, 0x25, 0x1e, 0x44, 0x07, 0x88,
	0x22, 0x5f, 0x86, 0x7c, 0x1c, 0x70, 0x7d, 0xde, 0x94, 0xac, 0x6d, 0xf6, 0xf4, 0x37, 0xb9, 0x07,
	0x4b, 0x19, 0x0c, 0xdb, 0xbb, 0xa9, 0x58, 0x6c, 0xf1, 0xe4, 0x26, 0x54, 0x5b, 0xdd, 0x24, 0x31,
	0xa7, 0x8a, 0x04, 0xa5, 0xf8, 0x53, 0xfa, 0xdb, 0xfc, 0x65, 0xe7, 0x9c, 0xd0, 0xf0, 0xd2, 0x21,
	0x7f, 0x4a, 0xbe, 0x00, 0x8b, 0xc7, 0x91, 0x3c, 0x8b, 0x06, 0xea, 0x9b, 0xfe, 0x2e, 0xdf, 0xec,
	0x32, 0x42, 0x7a, 0xeb, 0xd4, 0xb8, 0x3a, 0x9a, 0x1d, 0xe8, 0xef, 0x0b, 0xae, 0x8e, 0xa8, 0x74,
	0xf2, 0x75, 0x58, 0x1f, 0x6d, 0xc1, 0x3f, 0x95, 0x9a, 0x2b, 0xfa, 0x87, 0xdc, 0xf5, 0xab, 0x23,
	0xec, 0x3c, 0x31, 0x40, 0xc2, 0x61, 0x3e, 0xb6, 0x3c, 0xd9, 0x4b, 0xae, 0xef, 0xdb, 0x1c, 0xbe,
	0x39, 0x2a, 0x87, 0x77, 0x3a, 0x9d, 0x84, 0x77, 0x98, 0xe6, 0x41, 0x81, 0x46, 0xed, 0x5b, 0xc7,
	0x03, 0xbc, 0xab, 0xea, 0xdf, 0x81, 0xc9, 0x94, 0x4e, 0xc8, 0x06, 0x54, 0xe3, 0x84, 0xfb, 0x48,
	0x44, 0xa7, 0x26, 0xdb, 0x65, 0x44, 0x4b, 0xc8, 0x55, 0x73, 0x71, 0xc2, 0x0d, 0xec, 0x89, 0x5d,
	0x25, 0xaf, 0x41, 0x2d, 0x96, 0x26, 0xd7, 0x8b, 0x50, 0x3b, 0x46, 0x56, 0x8c, 0xa0, 0x88, 0x5d,
	0x71, 0xd4, 0x86, 0x89, 0x6d, 0x47, 0x44, 0xe4, 0x2d, 0x93, 0xca, 0xf5, 0xef, 0xc2, 0xea, 0x73,
	0x69, 0x95, 0xdc, 0x87, 0x6b, 0xcf, 0x89, 0xa9, 0xa3, 0xff, 0x12, 0xce, 0x6e, 0xab, 0x23, 0xe2,
	0xe9, 0xd8, 0x7f, 0x1e, 0x5e, 0xb2, 0x47, 0x60, 0xfd, 0xb4, 0x0f, 0xf5, 0x7f, 0x97, 0x80, 0x8e,
	0xea, 0x47, 0xe4, 0x8b, 0x50, 0x46, 0x42, 0x2e, 0x21, 0x1f, 0x8f, 0x24, 0xb0, 0x82, 0x22, 0xd2,
	0x32, 0x2a, 0x91, 0x37, 0x60, 0x31, 0x66, 0x89, 0x16, 0x2d, 0x11, 0xdb, 0x76, 0x9e, 0x0d, 0x24,
	0x63, 0xe8, 0xee, 0x42, 0x8f, 0x34, 0x9b, 0x47, 0x36, 0x4d, 0xbe, 0x2b, 0x2d, 0x83, 0x8b, 0x5c,
	0x61, 0xdc, 0xce, 0xb1, 0x6e, 0x3d, 0x83, 0xbe, 0x02, 0xb3, 0x38, 0xe9, 0x88, 0xa8, 0x15, 0x76,
	0x03, 0x1e, 0xe0, 0xc4, 0x5c, 0xf6, 0x66, 0xcc, 0xe2, 0x03, 0xb7, 0x56, 0xff, 0xcf, 0x18, 0x54,
	0xfa, 0x1c, 0x24, 0x04, 0xca, 0x78, 0x1a, 0xf6, 0x70, 0xf1, 0xbf, 0x09, 0x0f, 0x8e, 0xa4, 0x69,
	0x78, 0xf0, 0x81, 0x34, 0xe0, 0xb2, 0x7d, 0xd7, 0x9e, 0xd1, 0xc2, 0x39, 0x54, 0xb3, 0xa2, 0xc2,
	0x60, 0x41, 0xb6, 0x61, 0x81, 0xc7, 0xb2, 0x75, 0xe4, 0x37, 0x65, 0x37, 0x0a, 0x58, 0x72, 0xd1,
	0x3b, 0xcc, 0x5f, 0x46, 0xe1, 0xae, 0x93, 0x39, 0x9d, 0x1b, 0x40, 0xec, 0x8c, 0xdd, 0xb3, 0xc5,
	0x4b, 0xa8, 0x50, 0x45, 0x49, 0x71, 0x87, 0x37, 0x61, 0xa9, 0x7f, 0x0e, 0x4b, 0x55, 0x2e, 0xd9,
	0xb8, 0xf6, 0xcd, 0x58, 0x4e, 0xef, 0xd5, 0x81, 0x41, 0x72, 0x62, 0xd8, 0x1c, 0xf9, 0x79, 0x58,
	0xcc, 0x61, 0x3d, 0x0e, 0x4d, 0xa2, 0xf5, 0xf9, 0x4c, 0x5a, 0x70, 0xaa, 0xfe, 0xc7, 0x31, 0xa8,
	0xf4, 0x35, 0x55, 0xb2, 0x08, 0x97, 0xe2, 0x6e, 0xf3, 0x98, 0x5f, 0xb8, 0xf4, 0x74, 0x4f, 0xe6,
	0x80, 0xcf, 0x84, 0x3e, 0x0a, 0x12, 0x76, 0xc6, 0x42, 0xbf, 0x18, 0xf3, 0x4a, 0xbe, 0x8e, 0x9d,
	0x88, 0xdc, 0x04, 0x52, 0x80, 0xb2, 0x20, 0x48, 0xb8, 0x52, 0x69, 0xf0, 0x73, 0xc9, 0x8e, 0x15,
	0x14, 0x2e, 0x41, 0xb6, 0xff, 0x61, 0xcf, 0xb3, 0x81, 0xaf, 0x5a, 0xc1, 0x5e, 0xb6, 0x4e, 0x28,
	0x4c, 0xb8, 0x59, 0x0f, 0x43, 0x5d, 0xf6, 0xd2, 0x47, 0xe3, 0xb8, 0x49, 0x96, 0xae, 0xc2, 0x80,
	0x96, 0x3d, 0xf7, 0x64, 0x0a, 0xd9, 0x32, 0x70, 0x1e, 0xbc, 0x49, 0xb3, 0x80, 0x71, 0xbb, 0x01,
	0xc4, 0xed, 0x5d, 0xb8, 0x5e, 0x62, 0xcc, 0xca, 0xe9, 0xe6, 0xf9, 0x75, 0xb2, 0x1e, 0xc2, 0xd2,
	0x88, 0x5e, 0x4b, 0xae, 0x43, 0x25, 0xef, 0x18, 0x22, 0x0a, 0xf8, 0x39, 0xc6, 0x6f, 0xd6, 0x9b,
	0xcb, 0x96, 0x1f, 0x98, 0xd5, 0x11, 0x09, 0x9b, 0xa6, 0xf6, 0x78, 0x9e, 0xda, 0xf5, 0x67, 0x63,
	0xb0, 0x30, 0x94, 0x16, 0xc9, 0x62, 0xb1, 0x10, 0x90, 0x24, 0x6d, 0x31, 0xd0, 0x1e, 0xdb, 0x28,
	0x70, 0xf6, 0x37, 0x07, 0xd2, 0x68, 0x3c, 0x83, 0x0c, 0xa4, 0xd2, 0xfc, 0xb0, 0x54, 0xb2, 0x27,
	0x82, 0x0a, 0x64, 0x30, 0x99, 0xc8, 0x0d, 0xa8, 0xf6, 0x57, 0x83, 0xad, 0x05, 0xdb, 0xee, 0x7a,
	0xeb, 0x81, 0x6c, 0x41, 0xcd, 0x76, 0x07, 0x9e, 0xe4, 0x74, 0x71, 0x29, 0x83, 0x57, 0x53, 0x61,
	0xc6, 0x19, 0x6f, 0xc2, 0x82, 0x6c, 0x86, 0xe2, 0x69, 0x97, 0xfb, 0x31, 0xc3, 0xae, 0x6a, 0x76,
	0xe0, 0x8a, 0x9a, 0xab, 0x9f, 0xeb, 0x8e, 0x0e, 0x70, 0x80, 0xf2, 0xfb, 0x28, 0x26, 0xd7, 0x61,
	0x96, 0xa5, 0x21, 0xf4, 0x95, 0xe8, 0xd0, 0xc9, 0xac, 0xfd, 0xcf, 0x64, 0x82, 0x43, 0xd1, 0xa9,
	0xdf, 0x81, 0xd9, 0xc3, 0x98, 0xb7, 0x04, 0x0b, 0xdd, 0x81, 0x12, 0x28, 0x1f, 0x8b, 0x28, 0x70,
	0xa7, 0x88, 0xff, 0xcd, 0x1a, 0x12, 0xeb, 0x18, 0x8e, 0xed, 0xf8, 0xbf, 0xfe, 0x4d, 0xa8, 0xf4,
	0x4d, 0x82, 0xa6, 0x21, 0x0d, 0xc4, 0xc2, 0x16, 0x53, 0x7f, 0x1c, 0xd2, 0x63, 0x1f, 0x2b, 0x1c,
	0xfb, 0xbb, 0xb0, 0x38, 0xfc, 0xf2, 0x4d, 0x02, 0xb8, 0xc2, 0xcc, 0x1f, 0x7f, 0xc8, 0xdd, 0xde,
	0x7d, 0x76, 0xd9, 0x7c, 0xe1, 0xfb, 0xbc, 0xb7, 0x88, 0xb6, 0x06, 0xd6, 0xeb, 0x5f, 0x85, 0xda,
	0xc0, 0x62, 0x9e, 0xb5, 0xa5, 0x62, 0xd6, 0x5e, 0x85, 0xa9, 0xdc, 0x01, 0x13, 0x94, 0x59, 0x2f,
	0x5f, 0xa8, 0xbf, 0xf7, 0x52, 0xfa, 0xb9, 0x08, 0x5f, 0x78, 0x28, 0x7d, 0xbf, 0x0e, 0xf3, 0xae,
	0xfe, 0x12, 0x7e, 0xca, 0x59, 0x98, 0xb2, 0x96, 0xed, 0x35, 0xae, 0x36, 0x3d, 0x14, 0x39, 0x42,
	0x7c, 0xa1, 0xce, 0x3a, 0xfe, 0x22, 0x9d, 0x75, 0x13, 0xaa, 0x78, 0x1f, 0x34, 0x15, 0x9b, 0xde,
	0x3d, 0xcb, 0x78, 0xb2, 0x95, 0x74, 0x3d, 0xbd, 0x77, 0xbe, 0x06, 0x35, 0x77, 0xd3, 0x2d, 0x6c,
	0x62, 0xa9, 0xbe, 0x82, 0x82, 0x82, 0xd9, 0xc7, 0x30, 0xd3, 0x33, 0xf9, 0x5c, 0xfa, 0xb4, 0x83,
	0x4f, 0x8f, 0x19, 0xb2, 0x03, 0x93, 0xca, 0x26, 0xa8, 0x4d, 0xfa, 0xe9, 0xed, 0x57, 0x47, 0x9e,
	0x75, 0x31, 0x91, 0xbd, 0x4c, 0xcd, 0xf0, 0x72, 0x9c, 0xc8, 0x58, 0x2a, 0x9e, 0x98, 0x5a, 0x88,
	0x98, 0xee, 0x26, 0x1c, 0x2b, 0x62, 0xc6, 0xab, 0xa5, 0x92, 0xc3, 0x54, 0x40, 0x6e, 0x40, 0xa5,
	0x27, 0x3e, 0x5c, 0xd1, 0x67, 0x79, 0xb9, 0xcd, 0x15, 0x63, 0xc4, 0x15, 0xd9, 0x80, 0xd9, 0x9e,
	0x93, 0xa4, 0x1f, 0x4c, 0x64, 0xf5, 0x3c, 0x53, 0x3c, 0x47, 0x53, 0x93, 0xe6, 0xdc, 0xec, 0x87,
	0xb3, 0x84, 0xb7, 0xe9, 0x87, 0x39, 0x72, 0x3a, 0x96, 0x67, 0x38, 0x40, 0x7b, 0xbc, 0x6d, 0x6e,
	0x50, 0x79, 0xd4, 0xe9, 0x47, 0x39, 0x6a, 0x2a, 0x8b, 0x39, 0xf9, 0x12, 0x4c, 0x65, 0xdf, 0x30,
	0xe9, 0xff, 0x26, 0x70, 0xe2, 0x59, 0x6e, 0xd8, 0xcf, 0x9c, 0x8d, 0xf4, 0x33, 0x67, 0xe3, 0x51,
	0x0a, 0xb1, 0xea, 0x99, 0x46, 0xf3, 0x12, 0x42, 0x6e, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xaf,
	0xbd, 0xf8, 0x58, 0x52, 0x15, 0x00, 0x00,
}
