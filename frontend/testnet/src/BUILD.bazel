package(default_visibility = ["//visibility:public"])

load("@angular//:index.bzl", "ng_module")
load("@build_bazel_rules_typescript//:defs.bzl", "ts_config", "ts_devserver", "ts_web_test_suite")

ng_module(
    name = "main",
    srcs = [
        "main.dev.ts",
        "main.prod.ts",
    ],
    deps = [
        "//frontend/testnet/src/app",
        "@angular//packages/core",
        "@angular//packages/platform-browser",
    ],
    tsconfig = "//:tsconfig.json",
)

# This devserver is written in Go and is super-fast.
# It doesn't run any bundler or code splitter. Instead, it concatenates
# UMD JavaScript code on-the-fly in-memory.
# This scales really well for massive codebases.
ts_devserver(
    name = "devserver",
    # serve these files rooted at /
    additional_root_paths = [
        "npm/node_modules/zone.js/dist",
        "npm/node_modules/tslib",
        "npm/node_modules/@angular/material/prebuilt-themes",
        #"npm/node_modules/@ngrx/store/bundles",
    ],
    # Start from the development version of the main
    entry_module = "prysm/frontend/testnet/src/main.dev",
    scripts = [
        ":module-id.js",
    ],
    # This is the URL we'll point our <script> tag at
    serving_path = "/bundle.min.js",
    # Serve these files in addition to the JavaScript bundle
    static_files = [
        "@npm//node_modules/zone.js:dist/zone.min.js",
        "@npm//node_modules/tslib:tslib.js",
        "@npm//node_modules/@angular/material:prebuilt-themes/deeppurple-amber.css",
        #"@npm//node_modules/@ngrx/store:bundles/store.umd.min.js",
        "//frontend/testnet/src/styles:main",
        "//frontend/testnet/src/assets/images",
        "index.html",
    ],
    # Tell Bazel to build the sources first
    deps = ["//frontend/testnet/src:main"],
)

load("@build_bazel_rules_nodejs//:defs.bzl", "nodejs_binary", "rollup_bundle")

rollup_bundle(
    name = "bundle",
    # These Angular routes may be lazy-loaded at runtime.
    # So we tell Rollup that it can put them in separate JS chunks
    # (code-splitting) for faster application startup.
    # In the future, we could automatically gather these from statically
    # analyzing the Angular sources.
    additional_entry_points = [
        "frontend/testnet/src/app/app.module.ngfactory",
    ],
    entry_point = "frontend/testnet/src/main.prod",
    deps = [
        ":main",
        #"@npm//@ngrx/store",
    ],
)

load("@build_bazel_rules_nodejs//:defs.bzl", "history_server")

genrule(
    name = "copy_material_theme",
    srcs = ["@npm//node_modules/@angular/material:prebuilt-themes/deeppurple-amber.css"],
    outs = ["deeppurple-amber.css"],
    cmd = "cp $< $@",
)

history_server(
    name = "prodserver",
    data = [
        "index.html",
        ":bundle",
        ":copy_material_theme",
        "//frontend:copy_systemjs",
        "//frontend:copy_zonejs",
        "//frontend/testnet/src/assets/images",
        "//frontend/testnet/src/styles:main",
    ],
)

ts_web_test_suite(
    name = "tests",
    srcs = ["@npm//node_modules/tslib:tslib.js"],
    bootstrap = [
        "@npm//node_modules/zone.js:dist/zone-testing-bundle.js",
        "@npm//node_modules/reflect-metadata:Reflect.js",
        ":module-id.js",
    ],
    browsers = [
        #"@io_bazel_rules_webtesting//browsers:chromium-local",
        "//:chromium-no-sandbox",
    ],
    deps = [
        "//frontend/testnet/src/app:test_lib",
    ],
)
